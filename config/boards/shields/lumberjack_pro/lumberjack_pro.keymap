/*
 * Copyright (c) 2021 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/outputs.h>
#include <dt-bindings/zmk/rgb.h>
#include <dt-bindings/zmk/ext_power.h>
#include "keypos_34keys.h"

#define _BASE    0
#define _NAV     1
#define _SYM     2
#define _BTF     3

#define RGB_BASE RGB_COLOR_HSB(20,100,50)
#define RGB_SYM RGB_COLOR_HSB(20,100,50)
#define RGB_NAV RGB_COLOR_HSB(40,80,50)
#define RGB_BTF RGB_COLOR_HSB(200,100,60)

/ {

// ------------------------- MACROS --------------------------------
    macros {
        to_BASE: to_BASE {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            wait-ms = <0>;
            tap-ms = <0>;
            bindings
                = <&rgb_ug RGB_BASE>
                , <&tog _NAV>
                ;
        };

        to_NAV: to_NAV {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            wait-ms = <0>;
            tap-ms = <0>;
            bindings
                = <&rgb_ug RGB_NAV>
                , <&tog _NAV>
                ;
        };

        mo_BTF: mo_BTF {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            wait-ms = <0>;
            tap-ms = <0>;
            bindings
                = <&macro_tap &rgb_ug RGB_BTF>
                , <&macro_press &mo _BTF>
                , <&macro_pause_for_release>
                , <&macro_tap &rgb_ug RGB_BASE>
                , <&macro_release &mo _BTF>
                ;
        };

        to_BOOT: to_BOOT {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&rgb_ug RGB_COLOR_HSB(0,100,100)>
                , <&rgb_ug RGB_ON>
                , <&bootloader>
                ;
        };

        muc_you: macro_uc_you {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            wait-ms = <0>;
            tap-ms = <5>;
            bindings
                = <&kp LS(Y)>
                , <&kp O>
                , <&kp U>
                ;
        };

        mlc_you: macro_lc_you {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            wait-ms = <0>;
            tap-ms = <5>;
            bindings
                = <&kp Y>
                , <&kp O>
                , <&kp U>
                ;
        };

        muc_the: macro_uc_the {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            wait-ms = <0>;
            tap-ms = <5>;
            bindings
                = <&kp LS(T)>
                , <&kp H>
                , <&kp E>
                ;
        };

        mlc_the: macro_lc_the {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            wait-ms = <0>;
            tap-ms = <5>;
            bindings
                = <&kp T>
                , <&kp H>
                , <&kp E>
                ;
        };

        mlc_qu: macro_lc_qu {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            wait-ms = <0>;
            tap-ms = <5>;
            bindings
                = <&kp Q>
                , <&kp U>
                ;
        };

        mlc_gh: macro_lc_gh {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            wait-ms = <0>;
            tap-ms = <5>;
            bindings
                = <&kp G>
                , <&kp H>
                ;
        };

        mlc_ing: macro_lc_ing {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            wait-ms = <0>;
            tap-ms = <5>;
            bindings
                = <&kp I>
                , <&kp N>
                , <&kp G>
                ;
        };
    };

    combos {
        compatible = "zmk,combos";
// ------------------------- LAYER COMBOS --------------------------------
        // combo_BOOT {
        //     timeout-ms = <50>;
        //     key-positions = <0 11>;
        //     bindings = <&to_BOOT>;
        // };

        // combo_BTF {
        //     timeout-ms = <50>;
        //     key-positions = <LHO RHO>;
        //     bindings = <&mo_BTF>;
        // };

        // combo_NAVR {
        //     timeout-ms = <50>;
        //     key-positions = <RMP RHI>;
        //     bindings = <&to_NAV>;
        //     layers = <_BASE>;
        // };

        // combo_BASER {
        //     timeout-ms = <50>;
        //     key-positions = <RMP RHI>;
        //     bindings = <&to_BASE>;
        //     layers = <_NAV>;
        // };

        combo_NAV {
            timeout-ms = <50>;
            key-positions = <52 55>;
            bindings = <&to_NAV>;
            layers = <_BASE>;
        };

        combo_BASE {
            timeout-ms = <50>;
            key-positions = <52 55>;
            bindings = <&to_BASE>;
            layers = <_NAV>;
        };

// ------------------------- MODS COMBOS --------------------------------
        combo_CAPS {
            timeout-ms = <50>;
            key-positions = <LMI RMI>;
            bindings = <&caps_word>;
            require-prior-idle-ms = <200>;
            layers = <_BASE>;
        };

// ------------------------- SYMBOL COMBOS --------------------------------
        combo_LPAR {
            timeout-ms = <45>;
            require-prior-idle-ms = <200>;
            key-positions = <LMM LMI>;
            bindings = <&kp LPAR>;
            layers = <_BASE _SYM>;
        };

        combo_RPAR {
            timeout-ms = <45>;
            require-prior-idle-ms = <200>;
            key-positions = <RMI RMM>;
            bindings = <&kp RPAR>;
            layers = <_BASE _SYM>;
        };

        combo_LBRC {
            timeout-ms = <45>;
            require-prior-idle-ms = <200>;
            key-positions = <LTM LTI>;
            bindings = <&kp LBRC>;
            layers = <_BASE _SYM>;
        };

        combo_RBRC {
            timeout-ms = <45>;
            require-prior-idle-ms = <200>;
            key-positions = <RTI RTM>;
            bindings = <&kp RBRC>;
            layers = <_BASE _SYM>;
        };

        combo_LBKT {
            timeout-ms = <45>;
            require-prior-idle-ms = <200>;
            key-positions = <LBM LBI>;
            bindings = <&kp LBKT>;
            layers = <_BASE _SYM>;
        };

        combo_RBKT {
            timeout-ms = <45>;
            require-prior-idle-ms = <200>;
            key-positions = <RBI RBM>;
            bindings = <&kp RBKT>;
            layers = <_BASE _SYM>;
        };

        combo_GT {
            timeout-ms = <45>;
            require-prior-idle-ms = <200>;
            key-positions = <RMM RMR>;
            bindings = <&kp GT>;
            layers = <_BASE _SYM>;
        };

        combo_LT {
            timeout-ms = <45>;
            require-prior-idle-ms = <200>;
            key-positions = <LMM LMR>;
            bindings = <&kp LT>;
            layers = <_BASE _SYM>;
        };

// ------------------------- CHARACTER COMBOS --------------------------------
        combo_YOU {
            timeout-ms = <50>;
            key-positions = <RTI RTM RTR>;
            bindings = <&mm_you>;
            layers = <_BASE>;
        };

        combo_THE {
            timeout-ms = <50>;
            key-positions = <LMI LMM LMR>;
            bindings = <&mm_the>;
            layers = <_BASE>;
        };

        combo_QU {
            timeout-ms = <150>;
            key-positions = <RBM RBR>;
            bindings = <&mlc_qu>;
            layers = <_BASE>;
        };

        // combo_GH {
        //     timeout-ms = <150>;
        //     key-positions = <RMC RMI>;
        //     bindings = <&mlc_gh>;
        //     layers = <_BASE>;
        // };

        combo_ING {
            timeout-ms = <150>;
            key-positions = <RMI RMM RMR>;
            bindings = <&mlc_ing>;
            layers = <_BASE>;
        };
    };

    behaviors {
// ------------------------- ENCODER -----------------------------------
        rot_kp: sensor_rotate_kp {
            compatible = "zmk,behavior-sensor-rotate-var";
            #sensor-binding-cells = <2>;
            bindings = <&kp>, <&kp>;
        };

// ------------------------- TAP-DANCES --------------------------------
        cp_c: cp_c {
            compatible = "zmk,behavior-tap-dance";
            #binding-cells = <0>;
            tapping-term-ms = <400>;
            bindings = <&kp LC(C)>, <&kp LG(C)>;
        };

        cp_v: cp_v {
            compatible = "zmk,behavior-tap-dance";
            #binding-cells = <0>;
            tapping-term-ms = <400>;
            bindings = <&kp LC(V)>, <&kp LG(V)>;
        };

        cp_x: cp_x {
            compatible = "zmk,behavior-tap-dance";
            #binding-cells = <0>;
            tapping-term-ms = <400>;
            bindings = <&kp LC(X)>, <&kp LG(X)>;
        };

        app_lock: app_lock {
            compatible = "zmk,behavior-tap-dance";
            #binding-cells = <0>;
            tapping-term-ms = <400>;
            bindings = <&kp K_APP>, <&kp LG(L)>, <&kp LC(LA(DEL))>;
        };

// ------------------------- HOLD-TAPS --------------------------------
        /* left-hand HRMs */
        hml: hrm_left {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "balanced";
            tapping-term-ms = <300>;
            quick-tap-ms = <170>;                // repeat on tap-into-hold
            require-prior-idle-ms = <250>;
            bindings = <&kp>, <&kp>;
            hold-trigger-key-positions = <KEYS_R THUMBS>;
            hold-trigger-on-release;             // delay positional check until key-release
        };

        /* right-hand HRMs */
        hmr: hrm_right {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "balanced";
            tapping-term-ms = <300>;
            quick-tap-ms = <170>;                // repeat on tap-into-hold
            require-prior-idle-ms = <250>;
            bindings = <&kp>, <&kp>;
            hold-trigger-key-positions = <KEYS_L THUMBS>;
            hold-trigger-on-release;             // delay positional check until key-release
        };

        hsl: hrs_left {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "balanced";
            tapping-term-ms = <300>;
            quick-tap-ms = <170>;                // repeat on tap-into-hold
            require-prior-idle-ms = <120>;
            bindings = <&kp>, <&kp>;
            hold-trigger-key-positions = <KEYS_R THUMBS>;
            hold-trigger-on-release;             // delay positional check until key-release
        };

        hsr: hrs_right {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "balanced";
            tapping-term-ms = <300>;
            quick-tap-ms = <170>;                // repeat on tap-into-hold
            require-prior-idle-ms = <120>;
            bindings = <&kp>, <&kp>;
            hold-trigger-key-positions = <KEYS_L THUMBS>;
            hold-trigger-on-release;             // delay positional check until key-release
        };

        bst: backspace-tap {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "balanced";
            tapping-term-ms = <200>;
            quick-tap-ms = <170>;
            //require-prior-idle-ms = <100>;
            bindings = <&mo>, <&kp>;
        };

        spt: space-tap {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "balanced";
            tapping-term-ms = <250>;
            quick-tap-ms = <200>;
            //require-prior-idle-ms = <100>;
            bindings = <&mo>, <&kp>;
        };

        btf_nav: BTF-NAV-lock {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "hold-preferred";
            tapping-term-ms = <250>;
            quick-tap-ms = <0>;
            //require-prior-idle-ms = <100>;
            bindings = <&mo_BTF>, <&to_NAV>;
        };

// ------------------------- MOD-MORPHS --------------------------------
        mm_you: mm_you {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&mlc_you>, <&muc_you>;
            mods = <(MOD_LSFT)>;
        };

        mm_the: mm_the {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&mlc_the>, <&muc_the>;
            mods = <(MOD_LSFT)>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

                base_layer {
// ----------------------------------------------------------------------------------
// | ESC |  1  |  2  |  3  |  4  |  5  |        |  6  |  7  |  8  |  9  |  0  | DEL |
// | HOM |  P  |  L  |  M  |  H  |  F  |        |  W  |  C  |  O  |  U  |  Y  | pUP |
// | TAB |  N  |  R  |  T  |  D  |  B  |        |  G  |  S  |  A  |  E  |  I  | RET |
// | END | ` ~ |  J  |  V  |  K  |  =  |  MUTE  |  +  |  Z  |  X  |  Q  | UP  | pDN |
// | cpV | cpC | cpX |_BTF |_SYM(BSPC) |        | _NAV(SPC) |_BTF | LEFT| DOWN| RGHT|
                        bindings = <
   &kp ESC    &kp N1       &kp N2       &kp N3      &kp N4       &kp N5                 &kp N6   &kp N7       &kp N8      &kp N9       &kp N0      &kp DEL
   &kp HOME   &kp P        &kp L        &kp M       &kp H        &kp F                  &kp W    &kp C        &kp O       &kp U        &kp Y       &kp PG_UP
   &kp TAB    &hml LALT N  &hml LCTRL R &hml LGUI T &hsl LSHFT D &kp B                  &kp G    &hsr LSHFT S &hmr LGUI A &hmr LCTRL E &hmr LALT I &kp RET
   &kp END    &kp GRAVE    &kp J        &kp V       &kp K        &kp EQUAL  &kp C_MUTE  &kp PLUS &kp Z        &kp X       &kp Q        &kp UP      &kp PG_DN
   &cp_v      &cp_c        &cp_x        &mo_BTF          &bst _SYM BSPC                     &spt _NAV SPACE   &mo_BTF     &kp LEFT     &kp DOWN    &kp RIGHT
                        >;
                        sensor-bindings = <&rot_kp C_VOL_UP C_VOL_DN>;
                };

                nav_layer {
// -------------------------------------------------------------------------------------
// |     |     |     |     |     |     |        |     |      |      |      |     |     |
// |     |  5  |  6  |  7  |  8  | INS |        | pUP | HOME |  UP  | END  | ESC |     |
// |     |  1  |  2  |  3  |  4  | PSC |        | pDN | LEFT | SPC  | RGHT | RET |     |
// |     |     | . , |  9  |  0  |     |  MUTE  |     | TAB  | DOWN | DEL  |     |     |
// |     |     |     |_BASE|_SYM(BSPC) |        |    SHFT    |_BASE |      |     |     |
                        bindings = <
   &none   &none        &none         &none        &none         &none                &none     &none           &none           &none            &none         &none
   &none   &kp N5       &kp N6        &kp N7       &kp N8        &kp INS              &kp PG_UP &kp HOME        &kp UP          &kp END          &kp ESC       &none
   &none   &hml LALT N1 &hml LCTRL N2 &hml LGUI N3 &hsl LSHFT N4 &kp PSCRN            &kp PG_DN &hsr LSHFT LEFT &hmr LGUI SPACE &hmr LCTRL RIGHT &hmr LALT RET &none
   &none   &none        &kp KP_DOT    &kp N9       &kp N0        &none     &kp C_MUTE &none     &kp TAB         &kp DOWN        &kp DEL          &none         &none
   &none   &none        &none         &to_BASE          &bst _SYM BSPC                      &kp LSHFT           &to_BASE        &none            &none         &none
                        >;
                        sensor-bindings = <&rot_kp C_VOL_UP C_VOL_DN>;
                };

                sym_layer {
// --------------------------------------------------------------------------------
// |     |     |     |     |     |     |      |     |     |     |     |     |     |
// |     |  \  |  |  |  _  |  =  |  \  |      |  ~  |  "  |  ;  |  :  |  !  |     |
// |     |  /  |  *  |  -  |  +  |  §  |      |  `  |  '  |  ,  |  .  |  ?  |     |
// |     |     |  &  |  ^  |  %  |     | MUTE |     |  @  |  #  |  $  |     |     |
// |     |     |     |     |   BSPC    |      | _NAV(SPC) |     |     |     |     |
                        bindings = <
   &none   &none           &none           &none           &none           &none               &none     &none          &none           &none          &none           &none
   &none   &kp BSLH        &kp PIPE        &kp UNDER       &kp EQUAL       &kp NUHS            &kp TILDE &kp DQT        &kp SEMI        &kp COLON      &kp EXCL        &none
   &none   &hml LALT SLASH &hml LCTRL STAR &hml LGUI MINUS &hsl LSHFT PLUS &kp NUBS            &kp GRAVE &hsr LSHFT SQT &hmr LGUI COMMA &hmr LCTRL DOT &hmr LALT QMARK &none
   &none   &none           &kp AMPS        &kp CARET       &kp PRCNT       &none    &kp C_MUTE &none     &kp AT         &kp HASH        &kp DLLR       &none           &none
   &none   &none           &none           &none                   &kp BSPC                         &spt _NAV SPACE     &none           &none          &none           &none
                        >;
                        sensor-bindings = <&rot_kp C_VOL_UP C_VOL_DN>;
                };

                btf_layer {
// --------------------------------------------------------------------------------
// | CLR | BT1 | BT2 | BT3 | BT4 | BT5 |      |     |     |     |     |     | CLS |
// |     |  [  |  ]  |  {  |  }  |     |      |     | F1  | F2  | F3  | F4  |     |
// |     | ALT | CTL | GUI | SFT |     |      |     | F5  | F6  | F7  | F8  |     |
// |     |  <  |  >  |  (  |  )  |     | BOOT |     | F9  | F10 | F11 | F12 |     |
// |     |     |     | APP |   RESET   |      |  LOCK SCR | APP |     |     |     |
                        bindings = <
   &bt BT_CLR &bt BT_SEL 0 &bt BT_SEL 1 &bt BT_SEL 2 &bt BT_SEL 3 &bt BT_SEL 4         &none  &none   &none     &none    &none    &kp LA(F4)
   &none      &kp LBKT     &kp RBKT     &kp LBRC     &kp RBRC     &none                &none  &kp F1  &kp F2    &kp F3   &kp F4   &none
   &none      &kp LALT     &kp LCTRL    &kp LGUI     &kp LSHFT    &none                &none  &kp F5  &kp F6    &kp F7   &kp F8   &none
   &none      &kp LT       &kp GT       &kp LPAR     &kp RPAR     &none    &to_BOOT    &none  &kp F9  &kp F10   &kp F11  &kp F12  &none
   &none      &none        &none        &kp K_APP       &kp LC(LA(DEL))                  &kp LG(L)    &kp K_APP &none    &none    &none
                        >;
                        sensor-bindings = <&rot_kp C_BRI_INC C_BRI_DEC>;
                };
    };
};